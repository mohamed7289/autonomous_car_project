
OCT22_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000061e  000006b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000a0  008000a0  000006f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000724  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ece  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6d  00000000  00000000  000027f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fef  00000000  00000000  00003363  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000504  00000000  00000000  00004354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df3  00000000  00000000  00004858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015df  00000000  00000000  0000564b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006c2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__vector_1>
   8:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_2>
   c:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_6>
  1c:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_7>
  20:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_8>
  24:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  8a:	0c 94 0d 03 	jmp	0x61a	; 0x61a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Cmd>:
	LCD_Cmd(0x32);
	LCD_Cmd(0x28);//Set Function 4Bit & 2Line & 5*8
	LCD_Cmd(0x06);//Entry Mode Move to Right
	LCD_Cmd(0x0C);//Display ON & Cursor ON & Blink
}
void LCD_Cmd(u8 cmd){
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
	u8 PortValue = STD_Low;
	DIO_WriteChannel(LCD_RS,STD_Low);
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	89 e0       	ldi	r24, 0x09	; 9
  9a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_WriteChannel>
	PortValue = DIO_ReadPort(LCD_DataPort);
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_ReadPort>
	PortValue = (PortValue & 0x0F) | (cmd & 0xF0);
  a4:	8f 70       	andi	r24, 0x0F	; 15
  a6:	9c 2f       	mov	r25, r28
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	68 2f       	mov	r22, r24
  ac:	69 2b       	or	r22, r25
	DIO_WritePort(LCD_DataPort,PortValue);
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	8b e0       	ldi	r24, 0x0B	; 11
  b8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e8       	ldi	r24, 0x8F	; 143
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <LCD_Cmd+0x2e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <LCD_Cmd+0x34>
  c6:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	8b e0       	ldi	r24, 0x0B	; 11
  cc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	8f e1       	ldi	r24, 0x1F	; 31
  d2:	9e e4       	ldi	r25, 0x4E	; 78
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <LCD_Cmd+0x42>
  d8:	00 c0       	rjmp	.+0      	; 0xda <LCD_Cmd+0x48>
  da:	00 00       	nop
	
	_delay_ms(5);
	
	PortValue = DIO_ReadPort(LCD_DataPort);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_ReadPort>
	PortValue = (PortValue & 0x0F) | (cmd << 4);
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	90 e1       	ldi	r25, 0x10	; 16
  e6:	c9 9f       	mul	r28, r25
  e8:	90 01       	movw	r18, r0
  ea:	11 24       	eor	r1, r1
  ec:	68 2f       	mov	r22, r24
  ee:	62 2b       	or	r22, r18
	DIO_WritePort(LCD_DataPort,PortValue);
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_WritePort>
	DIO_WriteChannel(LCD_E,STD_Low);
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	8b e0       	ldi	r24, 0x0B	; 11
  fa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	8f e8       	ldi	r24, 0x8F	; 143
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_Cmd+0x70>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_Cmd+0x76>
 108:	00 00       	nop
	_delay_us(100);
	DIO_WriteChannel(LCD_E,STD_High);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	8b e0       	ldi	r24, 0x0B	; 11
 10e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9f e1       	ldi	r25, 0x1F	; 31
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Cmd+0x84>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_Cmd+0x8a>
 11c:	00 00       	nop
	_delay_ms(2);
}
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <LCD_Init>:
*  Author: user
*/
#include "LCD.h"

void LCD_Init(void){
	DIO_WriteChannel(LCD_RW,STD_Low);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_WriteChannel>
	DIO_WriteChannel(LCD_E,STD_High);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	8b e0       	ldi	r24, 0x0B	; 11
 12e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_WriteChannel>
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	89 ef       	ldi	r24, 0xF9	; 249
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <LCD_Init+0x16>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Init+0x20>
 142:	00 00       	nop
	_delay_ms(20);
	LCD_Cmd(0x33);
 144:	83 e3       	ldi	r24, 0x33	; 51
 146:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
	LCD_Cmd(0x32);
 14a:	82 e3       	ldi	r24, 0x32	; 50
 14c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
	LCD_Cmd(0x28);//Set Function 4Bit & 2Line & 5*8
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
	LCD_Cmd(0x06);//Entry Mode Move to Right
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
	LCD_Cmd(0x0C);//Display ON & Cursor ON & Blink
 15c:	8c e0       	ldi	r24, 0x0C	; 12
 15e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmd>
 162:	08 95       	ret

00000164 <main>:
{
		
	/*DIO_WriteChannel(DIO_ChannelD0,STD_High) ;
	DIO_WriteChannel(DIO_ChannelD2,STD_Low) ;*/

	DIO_Init() ;
 164:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_Init>
	LCD_Init() ;
 168:	0e 94 91 00 	call	0x122	; 0x122 <LCD_Init>
	GINT_EnableAllInterrupts() ;
 16c:	0e 94 6d 02 	call	0x4da	; 0x4da <GINT_EnableAllInterrupts>

	
	while(1)
	{
		DIO_WriteChannel(DIO_ChannelA3,STD_High) ;
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_WriteChannel>
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	89 e6       	ldi	r24, 0x69	; 105
 17c:	98 e1       	ldi	r25, 0x18	; 24
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x1a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x24>
 188:	00 00       	nop
		_delay_ms(500) ;
		DIO_WriteChannel(DIO_ChannelA3,STD_Low) ;
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_WriteChannel>
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	87 ea       	ldi	r24, 0xA7	; 167
 196:	91 e6       	ldi	r25, 0x61	; 97
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x34>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x3e>
 1a2:	00 00       	nop
 1a4:	e5 cf       	rjmp	.-54     	; 0x170 <main+0xc>

000001a6 <DIO_WriteChannel>:
		break;
		case DIO_PortC:
		ToggleBit(PORTC_Reg,BitNo);
		break;
		case DIO_PortD:
		ToggleBit(PORTD_Reg,BitNo);
 1a6:	98 2f       	mov	r25, r24
 1a8:	97 70       	andi	r25, 0x07	; 7
 1aa:	86 95       	lsr	r24
 1ac:	86 95       	lsr	r24
 1ae:	86 95       	lsr	r24
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	21 f1       	breq	.+72     	; 0x1fc <DIO_WriteChannel+0x56>
 1b4:	30 f0       	brcs	.+12     	; 0x1c2 <DIO_WriteChannel+0x1c>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	f1 f1       	breq	.+124    	; 0x236 <DIO_WriteChannel+0x90>
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <DIO_WriteChannel+0x1a>
 1be:	58 c0       	rjmp	.+176    	; 0x270 <DIO_WriteChannel+0xca>
 1c0:	08 95       	ret
 1c2:	61 30       	cpi	r22, 0x01	; 1
 1c4:	69 f4       	brne	.+26     	; 0x1e0 <DIO_WriteChannel+0x3a>
 1c6:	4b b3       	in	r20, 0x1b	; 27
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	b9 01       	movw	r22, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_WriteChannel+0x2e>
 1d0:	66 0f       	add	r22, r22
 1d2:	77 1f       	adc	r23, r23
 1d4:	9a 95       	dec	r25
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_WriteChannel+0x2a>
 1d8:	cb 01       	movw	r24, r22
 1da:	84 2b       	or	r24, r20
 1dc:	8b bb       	out	0x1b, r24	; 27
 1de:	08 95       	ret
 1e0:	4b b3       	in	r20, 0x1b	; 27
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	b9 01       	movw	r22, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_WriteChannel+0x48>
 1ea:	66 0f       	add	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	9a 95       	dec	r25
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_WriteChannel+0x44>
 1f2:	cb 01       	movw	r24, r22
 1f4:	80 95       	com	r24
 1f6:	84 23       	and	r24, r20
 1f8:	8b bb       	out	0x1b, r24	; 27
 1fa:	08 95       	ret
 1fc:	61 30       	cpi	r22, 0x01	; 1
 1fe:	69 f4       	brne	.+26     	; 0x21a <DIO_WriteChannel+0x74>
 200:	48 b3       	in	r20, 0x18	; 24
 202:	21 e0       	ldi	r18, 0x01	; 1
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	b9 01       	movw	r22, r18
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_WriteChannel+0x68>
 20a:	66 0f       	add	r22, r22
 20c:	77 1f       	adc	r23, r23
 20e:	9a 95       	dec	r25
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_WriteChannel+0x64>
 212:	cb 01       	movw	r24, r22
 214:	84 2b       	or	r24, r20
 216:	88 bb       	out	0x18, r24	; 24
 218:	08 95       	ret
 21a:	48 b3       	in	r20, 0x18	; 24
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	b9 01       	movw	r22, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_WriteChannel+0x82>
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	9a 95       	dec	r25
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_WriteChannel+0x7e>
 22c:	cb 01       	movw	r24, r22
 22e:	80 95       	com	r24
 230:	84 23       	and	r24, r20
 232:	88 bb       	out	0x18, r24	; 24
 234:	08 95       	ret
 236:	61 30       	cpi	r22, 0x01	; 1
 238:	69 f4       	brne	.+26     	; 0x254 <DIO_WriteChannel+0xae>
 23a:	45 b3       	in	r20, 0x15	; 21
 23c:	21 e0       	ldi	r18, 0x01	; 1
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	b9 01       	movw	r22, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_WriteChannel+0xa2>
 244:	66 0f       	add	r22, r22
 246:	77 1f       	adc	r23, r23
 248:	9a 95       	dec	r25
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_WriteChannel+0x9e>
 24c:	cb 01       	movw	r24, r22
 24e:	84 2b       	or	r24, r20
 250:	85 bb       	out	0x15, r24	; 21
 252:	08 95       	ret
 254:	45 b3       	in	r20, 0x15	; 21
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	b9 01       	movw	r22, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_WriteChannel+0xbc>
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	9a 95       	dec	r25
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_WriteChannel+0xb8>
 266:	cb 01       	movw	r24, r22
 268:	80 95       	com	r24
 26a:	84 23       	and	r24, r20
 26c:	85 bb       	out	0x15, r24	; 21
 26e:	08 95       	ret
 270:	61 30       	cpi	r22, 0x01	; 1
 272:	69 f4       	brne	.+26     	; 0x28e <DIO_WriteChannel+0xe8>
 274:	42 b3       	in	r20, 0x12	; 18
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	b9 01       	movw	r22, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_WriteChannel+0xdc>
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	9a 95       	dec	r25
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_WriteChannel+0xd8>
 286:	cb 01       	movw	r24, r22
 288:	84 2b       	or	r24, r20
 28a:	82 bb       	out	0x12, r24	; 18
 28c:	08 95       	ret
 28e:	42 b3       	in	r20, 0x12	; 18
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	b9 01       	movw	r22, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_WriteChannel+0xf6>
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	9a 95       	dec	r25
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_WriteChannel+0xf2>
 2a0:	cb 01       	movw	r24, r22
 2a2:	80 95       	com	r24
 2a4:	84 23       	and	r24, r20
 2a6:	82 bb       	out	0x12, r24	; 18
 2a8:	08 95       	ret

000002aa <DIO_ReadPort>:
	}
}

u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 PortValue = STD_Low;
	switch(portId){
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	41 f0       	breq	.+16     	; 0x2be <DIO_ReadPort+0x14>
 2ae:	28 f0       	brcs	.+10     	; 0x2ba <DIO_ReadPort+0x10>
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <DIO_ReadPort+0x18>
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	39 f0       	breq	.+14     	; 0x2c6 <DIO_ReadPort+0x1c>
 2b8:	08 c0       	rjmp	.+16     	; 0x2ca <DIO_ReadPort+0x20>
		case DIO_PortA:
		PortValue = PORTA_Reg;
 2ba:	8b b3       	in	r24, 0x1b	; 27
		break;
 2bc:	08 95       	ret
		case DIO_PortB:
		PortValue = PORTB_Reg;
 2be:	88 b3       	in	r24, 0x18	; 24
		break;
 2c0:	08 95       	ret
		case DIO_PortC:
		PortValue = PORTC_Reg;
 2c2:	85 b3       	in	r24, 0x15	; 21
		break;
 2c4:	08 95       	ret
		case DIO_PortD:
		PortValue = PORTD_Reg;
 2c6:	82 b3       	in	r24, 0x12	; 18
		break;
 2c8:	08 95       	ret
		break;
	}
}

u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 PortValue = STD_Low;
 2ca:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PortD:
		PortValue = PORTD_Reg;
		break;
	}
	return PortValue;
}
 2cc:	08 95       	ret

000002ce <DIO_WritePort>:
void DIO_WritePort(DIO_PortTypes portId,u8 data){
	switch(portId){
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	41 f0       	breq	.+16     	; 0x2e2 <DIO_WritePort+0x14>
 2d2:	28 f0       	brcs	.+10     	; 0x2de <DIO_WritePort+0x10>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	39 f0       	breq	.+14     	; 0x2e6 <DIO_WritePort+0x18>
 2d8:	83 30       	cpi	r24, 0x03	; 3
 2da:	39 f0       	breq	.+14     	; 0x2ea <DIO_WritePort+0x1c>
 2dc:	08 95       	ret
		case DIO_PortA:
		PORTA_Reg = data;
 2de:	6b bb       	out	0x1b, r22	; 27
		break;
 2e0:	08 95       	ret
		case DIO_PortB:
		PORTB_Reg = data;
 2e2:	68 bb       	out	0x18, r22	; 24
		break;
 2e4:	08 95       	ret
		case DIO_PortC:
		PORTC_Reg = data;
 2e6:	65 bb       	out	0x15, r22	; 21
		break;
 2e8:	08 95       	ret
		case DIO_PortD:
		PORTD_Reg = data;
 2ea:	62 bb       	out	0x12, r22	; 18
 2ec:	08 95       	ret

000002ee <DIO_Init>:
	{Output,STD_High},
	{Input,STD_Low},
	{Output,STD_High},
};

void DIO_Init(void){
 2ee:	e0 e6       	ldi	r30, 0x60	; 96
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
 2f2:	80 e0       	ldi	r24, 0x00	; 0
			{
				SetBit(DDRB_Reg,BitNo);
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	50 e0       	ldi	r21, 0x00	; 0
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
	{
		Portx = count/8;
		BitNo = count%8;
 2f8:	28 2f       	mov	r18, r24
 2fa:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 2fc:	98 2f       	mov	r25, r24
 2fe:	96 95       	lsr	r25
 300:	96 95       	lsr	r25
 302:	96 95       	lsr	r25
 304:	91 30       	cpi	r25, 0x01	; 1
 306:	09 f1       	breq	.+66     	; 0x34a <DIO_Init+0x5c>
 308:	30 f0       	brcs	.+12     	; 0x316 <DIO_Init+0x28>
 30a:	92 30       	cpi	r25, 0x02	; 2
 30c:	c1 f1       	breq	.+112    	; 0x37e <DIO_Init+0x90>
 30e:	93 30       	cpi	r25, 0x03	; 3
 310:	09 f4       	brne	.+2      	; 0x314 <DIO_Init+0x26>
 312:	4f c0       	rjmp	.+158    	; 0x3b2 <DIO_Init+0xc4>
 314:	67 c0       	rjmp	.+206    	; 0x3e4 <DIO_Init+0xf6>
			case DIO_PortA:
			if (PinCfg[count].PinDir == Output)
 316:	90 81       	ld	r25, Z
 318:	91 30       	cpi	r25, 0x01	; 1
 31a:	59 f4       	brne	.+22     	; 0x332 <DIO_Init+0x44>
			{
				SetBit(DDRA_Reg,BitNo);
 31c:	9a b3       	in	r25, 0x1a	; 26
 31e:	ba 01       	movw	r22, r20
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_Init+0x38>
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	2a 95       	dec	r18
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_Init+0x34>
 32a:	9b 01       	movw	r18, r22
 32c:	29 2b       	or	r18, r25
 32e:	2a bb       	out	0x1a, r18	; 26
 330:	59 c0       	rjmp	.+178    	; 0x3e4 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
 332:	3a b3       	in	r19, 0x1a	; 26
 334:	ba 01       	movw	r22, r20
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_Init+0x4e>
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	2a 95       	dec	r18
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_Init+0x4a>
 340:	96 2f       	mov	r25, r22
 342:	90 95       	com	r25
 344:	93 23       	and	r25, r19
 346:	9a bb       	out	0x1a, r25	; 26
 348:	4d c0       	rjmp	.+154    	; 0x3e4 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortB:
			if (PinCfg[count].PinDir == Output)
 34a:	90 81       	ld	r25, Z
 34c:	91 30       	cpi	r25, 0x01	; 1
 34e:	59 f4       	brne	.+22     	; 0x366 <DIO_Init+0x78>
			{
				SetBit(DDRB_Reg,BitNo);
 350:	97 b3       	in	r25, 0x17	; 23
 352:	ba 01       	movw	r22, r20
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_Init+0x6c>
 356:	66 0f       	add	r22, r22
 358:	77 1f       	adc	r23, r23
 35a:	2a 95       	dec	r18
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_Init+0x68>
 35e:	9b 01       	movw	r18, r22
 360:	29 2b       	or	r18, r25
 362:	27 bb       	out	0x17, r18	; 23
 364:	3f c0       	rjmp	.+126    	; 0x3e4 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
 366:	37 b3       	in	r19, 0x17	; 23
 368:	ba 01       	movw	r22, r20
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_Init+0x82>
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	2a 95       	dec	r18
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_Init+0x7e>
 374:	96 2f       	mov	r25, r22
 376:	90 95       	com	r25
 378:	93 23       	and	r25, r19
 37a:	97 bb       	out	0x17, r25	; 23
 37c:	33 c0       	rjmp	.+102    	; 0x3e4 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortC:
			if (PinCfg[count].PinDir == Output)
 37e:	90 81       	ld	r25, Z
 380:	91 30       	cpi	r25, 0x01	; 1
 382:	59 f4       	brne	.+22     	; 0x39a <DIO_Init+0xac>
			{
				SetBit(DDRC_Reg,BitNo);
 384:	94 b3       	in	r25, 0x14	; 20
 386:	ba 01       	movw	r22, r20
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_Init+0xa0>
 38a:	66 0f       	add	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	2a 95       	dec	r18
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_Init+0x9c>
 392:	9b 01       	movw	r18, r22
 394:	29 2b       	or	r18, r25
 396:	24 bb       	out	0x14, r18	; 20
 398:	25 c0       	rjmp	.+74     	; 0x3e4 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
 39a:	34 b3       	in	r19, 0x14	; 20
 39c:	ba 01       	movw	r22, r20
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_Init+0xb6>
 3a0:	66 0f       	add	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	2a 95       	dec	r18
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_Init+0xb2>
 3a8:	96 2f       	mov	r25, r22
 3aa:	90 95       	com	r25
 3ac:	93 23       	and	r25, r19
 3ae:	94 bb       	out	0x14, r25	; 20
 3b0:	19 c0       	rjmp	.+50     	; 0x3e4 <DIO_Init+0xf6>
			}
			break;
			case DIO_PortD:
			if (PinCfg[count].PinDir == Output)
 3b2:	90 81       	ld	r25, Z
 3b4:	91 30       	cpi	r25, 0x01	; 1
 3b6:	59 f4       	brne	.+22     	; 0x3ce <DIO_Init+0xe0>
			{
				SetBit(DDRD_Reg,BitNo);
 3b8:	91 b3       	in	r25, 0x11	; 17
 3ba:	ba 01       	movw	r22, r20
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_Init+0xd4>
 3be:	66 0f       	add	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	2a 95       	dec	r18
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_Init+0xd0>
 3c6:	9b 01       	movw	r18, r22
 3c8:	29 2b       	or	r18, r25
 3ca:	21 bb       	out	0x11, r18	; 17
 3cc:	0b c0       	rjmp	.+22     	; 0x3e4 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
 3ce:	31 b3       	in	r19, 0x11	; 17
 3d0:	ba 01       	movw	r22, r20
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_Init+0xea>
 3d4:	66 0f       	add	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	2a 95       	dec	r18
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_Init+0xe6>
 3dc:	96 2f       	mov	r25, r22
 3de:	90 95       	com	r25
 3e0:	93 23       	and	r25, r19
 3e2:	91 bb       	out	0x11, r25	; 17

void DIO_Init(void){
	DIO_ChannelTypes count = DIO_ChannelA0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	32 96       	adiw	r30, 0x02	; 2
 3e8:	80 32       	cpi	r24, 0x20	; 32
 3ea:	09 f0       	breq	.+2      	; 0x3ee <DIO_Init+0x100>
 3ec:	85 cf       	rjmp	.-246    	; 0x2f8 <DIO_Init+0xa>
				ClearBit(DDRD_Reg,BitNo);
			}
			break;
		}
	}
 3ee:	08 95       	ret

000003f0 <__vector_1>:
		ExtInt2FunPtr = ExtIntFunCopyPtr;
		break;
	}
}

ISR(INT0_vect){
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	2f 93       	push	r18
 3fc:	3f 93       	push	r19
 3fe:	4f 93       	push	r20
 400:	5f 93       	push	r21
 402:	6f 93       	push	r22
 404:	7f 93       	push	r23
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
 40a:	af 93       	push	r26
 40c:	bf 93       	push	r27
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
	ExtInt0FunPtr();
 412:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <ExtInt0FunPtr>
 416:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <ExtInt0FunPtr+0x1>
 41a:	09 95       	icall
}
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	7f 91       	pop	r23
 42a:	6f 91       	pop	r22
 42c:	5f 91       	pop	r21
 42e:	4f 91       	pop	r20
 430:	3f 91       	pop	r19
 432:	2f 91       	pop	r18
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <__vector_2>:

ISR(INT1_vect){
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	11 24       	eor	r1, r1
 448:	2f 93       	push	r18
 44a:	3f 93       	push	r19
 44c:	4f 93       	push	r20
 44e:	5f 93       	push	r21
 450:	6f 93       	push	r22
 452:	7f 93       	push	r23
 454:	8f 93       	push	r24
 456:	9f 93       	push	r25
 458:	af 93       	push	r26
 45a:	bf 93       	push	r27
 45c:	ef 93       	push	r30
 45e:	ff 93       	push	r31
	ExtInt1FunPtr();
 460:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <ExtInt1FunPtr>
 464:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <ExtInt1FunPtr+0x1>
 468:	09 95       	icall
}
 46a:	ff 91       	pop	r31
 46c:	ef 91       	pop	r30
 46e:	bf 91       	pop	r27
 470:	af 91       	pop	r26
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	7f 91       	pop	r23
 478:	6f 91       	pop	r22
 47a:	5f 91       	pop	r21
 47c:	4f 91       	pop	r20
 47e:	3f 91       	pop	r19
 480:	2f 91       	pop	r18
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <__vector_3>:

ISR(INT2_vect){
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	2f 93       	push	r18
 498:	3f 93       	push	r19
 49a:	4f 93       	push	r20
 49c:	5f 93       	push	r21
 49e:	6f 93       	push	r22
 4a0:	7f 93       	push	r23
 4a2:	8f 93       	push	r24
 4a4:	9f 93       	push	r25
 4a6:	af 93       	push	r26
 4a8:	bf 93       	push	r27
 4aa:	ef 93       	push	r30
 4ac:	ff 93       	push	r31
	ExtInt2FunPtr();
 4ae:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <__data_end>
 4b2:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <__data_end+0x1>
 4b6:	09 95       	icall
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	bf 91       	pop	r27
 4be:	af 91       	pop	r26
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	7f 91       	pop	r23
 4c6:	6f 91       	pop	r22
 4c8:	5f 91       	pop	r21
 4ca:	4f 91       	pop	r20
 4cc:	3f 91       	pop	r19
 4ce:	2f 91       	pop	r18
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	0f 90       	pop	r0
 4d6:	1f 90       	pop	r1
 4d8:	18 95       	reti

000004da <GINT_EnableAllInterrupts>:
 *  Author: user
 */ 
#include "GINT.h"

void GINT_EnableAllInterrupts(void){
	SetBit(GINT_SREG_Reg,GINT_SREG_Ibit);
 4da:	8f b7       	in	r24, 0x3f	; 63
 4dc:	80 68       	ori	r24, 0x80	; 128
 4de:	8f bf       	out	0x3f, r24	; 63
 4e0:	08 95       	ret

000004e2 <__vector_9>:

void TIMER1_ICR_SetValue(u16 value){
	TIMER1_ICR1_Reg = value;
}

ISR(TIMER1_OVF_vect){
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	2f 93       	push	r18
 4ee:	3f 93       	push	r19
 4f0:	4f 93       	push	r20
 4f2:	5f 93       	push	r21
 4f4:	6f 93       	push	r22
 4f6:	7f 93       	push	r23
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
 4fc:	af 93       	push	r26
 4fe:	bf 93       	push	r27
 500:	ef 93       	push	r30
 502:	ff 93       	push	r31
	Timer1_TOVIntFunPtr();
 504:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <Timer1_TOVIntFunPtr>
 508:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <Timer1_TOVIntFunPtr+0x1>
 50c:	09 95       	icall
}
 50e:	ff 91       	pop	r31
 510:	ef 91       	pop	r30
 512:	bf 91       	pop	r27
 514:	af 91       	pop	r26
 516:	9f 91       	pop	r25
 518:	8f 91       	pop	r24
 51a:	7f 91       	pop	r23
 51c:	6f 91       	pop	r22
 51e:	5f 91       	pop	r21
 520:	4f 91       	pop	r20
 522:	3f 91       	pop	r19
 524:	2f 91       	pop	r18
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <__vector_7>:

ISR(TIMER1_COMPA_vect){
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	2f 93       	push	r18
 53c:	3f 93       	push	r19
 53e:	4f 93       	push	r20
 540:	5f 93       	push	r21
 542:	6f 93       	push	r22
 544:	7f 93       	push	r23
 546:	8f 93       	push	r24
 548:	9f 93       	push	r25
 54a:	af 93       	push	r26
 54c:	bf 93       	push	r27
 54e:	ef 93       	push	r30
 550:	ff 93       	push	r31
	Timer1_OC1AIntFunPtr();
 552:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <Timer1_OC1AIntFunPtr>
 556:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <Timer1_OC1AIntFunPtr+0x1>
 55a:	09 95       	icall
}
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	bf 91       	pop	r27
 562:	af 91       	pop	r26
 564:	9f 91       	pop	r25
 566:	8f 91       	pop	r24
 568:	7f 91       	pop	r23
 56a:	6f 91       	pop	r22
 56c:	5f 91       	pop	r21
 56e:	4f 91       	pop	r20
 570:	3f 91       	pop	r19
 572:	2f 91       	pop	r18
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

0000057e <__vector_8>:

ISR(TIMER1_COMPB_vect){
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	2f 93       	push	r18
 58a:	3f 93       	push	r19
 58c:	4f 93       	push	r20
 58e:	5f 93       	push	r21
 590:	6f 93       	push	r22
 592:	7f 93       	push	r23
 594:	8f 93       	push	r24
 596:	9f 93       	push	r25
 598:	af 93       	push	r26
 59a:	bf 93       	push	r27
 59c:	ef 93       	push	r30
 59e:	ff 93       	push	r31
	Timer1_OC1BIntFunPtr();
 5a0:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <Timer1_OC1BIntFunPtr>
 5a4:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <Timer1_OC1BIntFunPtr+0x1>
 5a8:	09 95       	icall
}
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	7f 91       	pop	r23
 5b8:	6f 91       	pop	r22
 5ba:	5f 91       	pop	r21
 5bc:	4f 91       	pop	r20
 5be:	3f 91       	pop	r19
 5c0:	2f 91       	pop	r18
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <__vector_6>:
ISR(TIMER1_CAPT_vect)
{
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	2f 93       	push	r18
 5d8:	3f 93       	push	r19
 5da:	4f 93       	push	r20
 5dc:	5f 93       	push	r21
 5de:	6f 93       	push	r22
 5e0:	7f 93       	push	r23
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	af 93       	push	r26
 5e8:	bf 93       	push	r27
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
	Timer1_ICUIntFunPtr() ;
 5ee:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <Timer1_ICUIntFunPtr>
 5f2:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <Timer1_ICUIntFunPtr+0x1>
 5f6:	09 95       	icall
 5f8:	ff 91       	pop	r31
 5fa:	ef 91       	pop	r30
 5fc:	bf 91       	pop	r27
 5fe:	af 91       	pop	r26
 600:	9f 91       	pop	r25
 602:	8f 91       	pop	r24
 604:	7f 91       	pop	r23
 606:	6f 91       	pop	r22
 608:	5f 91       	pop	r21
 60a:	4f 91       	pop	r20
 60c:	3f 91       	pop	r19
 60e:	2f 91       	pop	r18
 610:	0f 90       	pop	r0
 612:	0f be       	out	0x3f, r0	; 63
 614:	0f 90       	pop	r0
 616:	1f 90       	pop	r1
 618:	18 95       	reti

0000061a <_exit>:
 61a:	f8 94       	cli

0000061c <__stop_program>:
 61c:	ff cf       	rjmp	.-2      	; 0x61c <__stop_program>
